.\" generated by kramdown
.TH "AWK" "gnfb"
.SH NAME
awk \- Process text
.SH "ESSENCE"
\fBawk\fP works as follows: it goes line by line, looking for an event\. When it finds it, it executes the command\.
.P
\fBawk\fP generally follows these structures:
.P
awk \[u2018]\fIevent\fP {\fIcommand\fP}\[u2019] file 
.br
command_cli | awk \[u2018]\fIevent\fP {\fIcommand\fP}\[u2019]
.P
\fIevent\fP, in most cases, will be a regex pattern, either in the form \fB/pattern/\fP (executes the command if the pattern matches), or \fB!/pattern/\fP (executes if it does not match)\.
.P
\fIcommand\fP, in most cases, will be \fIprint\fP, followed by some variable\. Some of them include:
.IP \(bu 4
\fB$0\fP is the entire matching line
.IP \(bu 4
\fB$n\fP where n is an integer\. It\[u2019]s the n\-th field of the current line\. By default, fields are words (characters separated by whitespaces), but you can change that using the FS variable\.
.IP \(bu 4
\fBFS\fP defines the field delimiter\. For example, if your file is a CSV, it might be good to set this to \fB,\fP\&\. You can do this using the \fB\-F","\fP flag\.
.IP \(bu 4
\fBNF\fP is the number of fields in the current line\. \fB$NF\fP will be the last field\.
.IP \(bu 4
\fBNR\fP is the current line number being analyzed by awk\.
.SH "EXAMPLES"
.TP
\fBls \-l | awk \'($3 == "guilherme")\'\fP
Prints only the lines where the user is named guilherme, for the command ls \-l
.TP
\fBawk \-F";" \'{print $2, $NF}\' filename\.csv | head \-n 10\fP
Prints the second and last columns of a semicolon\-separated CSV file\. Only the first 10 lines:
.TP
\fBawk \-F"," \'(NR == 2) {flag=1} (NR == 5) {flag=0} flag {print $1}\' filename\.csv\fP
Prints the first column of a CSV file, between lines 2 and 5:
.TP
\fBawk "/^Hello$/ {flag=1;next} /^World$/ {flag=0; exit} flag" filename\fP
Prints all content between lines with \[u201c]Hello\[u201d] and \[u201c]World\[u201d], only on the first match (ignores other \[u201c]Hello\[u201d]/\[u201d]World\[u201d] ranges that might appear later):
.TP
\fBgawk \-i inplace \'*command*\' filename\fP
Runs any awk command but saves the modifications in\-place:
.SH "NOTES"
To print multiple variables on the same line, separate them with commas\. If you separate them with spaces, they will be printed without spacing (\[u201c]glued\[u201d] together)\.
.P
There are other commands besides print, of course, but if it starts getting too complex, it\[u2019]s usually better to use a more complete programming language\.
.P
An empty event prints the whole line\. So, for example, \fBawk \'/pattern/\'\fP prints all lines that match a pattern\.
.P
\fBawk \'1\' filename\fP prints everything, while \fBawk \'0\' filename\fP prints nothing â€” which is why the flag\-based logic works\.
.P
gawk is the GNU implementation of awk, with a few extra features (like inplace)\.
